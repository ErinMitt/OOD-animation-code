Design Critique
Using the Model View controller design pattern and having it execute correctly shows
some strength in your design.
However, we thought that the View took over some of the Controller’s responsibilities.
In particular, we went over in class how we were supposed to pass some sort of ReadOnlyModel
to the View, and leave any mutation to the Controller.
In this design, the View directly mutated the Model.
The View also defined and assigned all of the commands, which is also usually the Controller’s job.
These two things combined meant that code in the Controller itself was pretty sparse.
Also, the direct mutation of the Model by the View made adapting the code to work
with our Model pretty difficult.
In this implementation, the EditorView asks the Model for a list of Shapes,
and then uses getters to directly access and mutate the shapes’ fields.
This means we had to write adapters for not only the Model and Shape classes,
but also for several built-in Java classes like Map.Entry and SortedMap.
We think a better and safer design would have been to mutate the Model by
calling public methods on the Model itself rather than calling methods on its fields.
This would make things like maintaining invariants easier
and would protect the private fields from malicious actors.

Implementation Critique
Most methods were implemented well, and allowed your code to run as an animator effectively.
You created shapes correctly and had working buttons, which is important to the core of an animator.
However, every time someone presses enter to add or edit a keyframe your code
throws a null pointer exception.
The null pointer exception happened because of a scoping issue.
The variable textField was defined in the “add” case,
but that definition won’t carry over to the “data” case.
If you want to keep a reference to the object, it might help to make it a field so that it can be
stored over long periods of time instead of just a local variable.
There was also an issue where the user could not change the animation speed.
It looks like this was an issue of not being able to access the Controller's timer
to set a new delay.
This has a similar fix as the previous problem - storing the timer as a field so that it will
be accessible later.
Lastly, the code for deleting keyframes had a relatively high time complexity - it iterated over
every frame starting from the current one and moved backwards one frame at a time
until it found the previous existing keyframe.
This wasn't too bad for short animations, but when we tried to remove keyframes from long animations
it caused noticeable lags in performance.
Because the list of keyframes is already a TreeMap, we recommend using the built-in
method floorEntry which will give you the same result for O(log n) complexity instead of O(n).

Documentation Critique
We appreciated that each variable was described concisely in the documentation
before it was declared.
We also appreciated that each method had a description, and that each parameter was described.
We had some trouble understanding some areas of the code because the documentation didn’t
always give enough information to understand the methods.
For example, the views take information about the shape’s location in an Array of ints,
but we couldn’t find any documentation telling the order of inputs. We had to look through the
AnimationPanel code to figure out that details[0] was the x coordinate and details[2] was the width.
There were a lot of cases where, for example, a method called “byChangeType” had the description
“Sorts all actions by their change type.“
This doesn’t really tell us what a change type is, nor what the method returns.
Adding a bit more  of a description to the methods and adding in documentation for things
that are not yet explained would really help a user quickly and fully understand your code.
